{"version":3,"sources":["components/feedbackButtons/FeedbackBtns.jsx","components/feedbackStatistics/FeedbackStatistics.jsx","components/section/Section.jsx","components/notificationMessage/notification.jsx","App.js","index.js"],"names":["FeedbackBtns","options","onLeaveFeedback","feedbackOptions","Object","keys","className","map","option","onClick","FeedbackStatistics","good","neutral","bad","total","percent","Section","title","children","Notification","message","App","state","setState","prevState","countPositiveFeedbackPercentage","countTotalFeedback","Math","round","this","totalFeedbackAmount","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAwBeA,EAtBM,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAEvBC,EAAkBC,OAAOC,KAAKJ,GAEpC,OACI,qBAAKK,UAAU,mBAAf,SACKH,EAAgBI,KAAI,SAAAC,GACjB,OACI,wBAAqBF,UAAU,eAC/BG,QAAS,kBAAIP,EAAgBM,IAD7B,SAEEA,GAFWA,SCajBE,EArBW,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACrD,OACI,qCACI,wCAAWJ,KACX,2CAAcC,EAAd,OACA,uCAAUC,KACV,uCAAWC,KACX,qDAAwBC,EAAxB,YCOOC,EAdH,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,oCACI,6BAAKD,IACJC,MCGEC,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OAAO,4BAAKA,KCuDAC,E,4MAjDbC,MAAQ,CACRX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAIJX,gBAAkB,SAAAM,GACjB,EAAKe,UAAS,SAAAC,GACZ,OAAO,eAAGhB,EAASgB,EAAUhB,GAAU,O,EAQ3CiB,gCAAkC,WAChC,OAAO,EAAKC,qBACRC,KAAKC,MAAO,EAAKN,MAAMX,KAAO,EAAKe,qBAAwB,KAC3D,G,wDAPN,WAEE,OADcG,KAAKP,MAAMX,KAAOkB,KAAKP,MAAMV,QAAUiB,KAAKP,MAAMT,M,oBAUlE,WACE,IAAMiB,EAAsBD,KAAKH,qBACjC,EAAyBG,KAAKP,MAAvBX,EAAP,EAAOA,KAAKC,EAAZ,EAAYA,QAAQC,EAApB,EAAoBA,IACpB,OAAQ,qCACN,cAAC,EAAD,CAASI,MAAO,8BAAhB,SAEA,cAAC,EAAD,CAAchB,QAAS4B,KAAKP,MAC1BpB,gBAAiB2B,KAAK3B,oBAGxB,cAAC,EAAD,CAASe,MAAM,aAAf,SAE2B,IAAxBa,EAA4B,cAAC,EAAD,CAAcV,QAAQ,sBACrD,cAAC,EAAD,CAAoBT,KAAMA,EACxBC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,EACPf,QAAUc,KAAKJ,6C,GA5CLM,aCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d0864244.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst FeedbackBtns = ({ options, onLeaveFeedback }) => {\r\n\r\n    const feedbackOptions = Object.keys(options)\r\n   \r\n    return (\r\n        <div className='button-container'>\r\n            {feedbackOptions.map(option => {\r\n                return (\r\n                    <button key={option} className='feedback-btn'\r\n                    onClick={()=>onLeaveFeedback(option)}\r\n                    >{option}</button>\r\n                )\r\n            })}\r\n       </div>\r\n        \r\n    )\r\n}\r\nFeedbackBtns.propTypes = {\r\n    options: PropTypes.objectOf(PropTypes.number),\r\n    onLeaveFeedback:PropTypes.func,\r\n}\r\n\r\nexport default FeedbackBtns","import PropTypes from 'prop-types'\r\n\r\nconst FeedbackStatistics = ({ good, neutral, bad, total, percent }) => {\r\n    return (\r\n        <>\r\n            <p>Good : {good}</p>\r\n            <p>Neutral : {neutral} </p>\r\n            <p>Bad : {bad}</p>\r\n            <p>Total:{ total}</p>\r\n            <p>Positive Feedback : {percent} %</p>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nFeedbackStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    percent:PropTypes.number,\r\n}\r\n\r\n export default FeedbackStatistics","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <section>\r\n            <h1>{title}</h1>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children:PropTypes.node,\r\n}\r\n    export default Section","import PropTypes from 'prop-types'\r\n\r\nconst Notification = ({ message }) => {\r\n   return <p>{ message}</p>\r\n}\r\n\r\nNotification.propTypes = {\r\n      message: PropTypes.string,\r\n}\r\nexport default Notification","import React, { Component } from 'react'\nimport FeedbackBtns from './components/feedbackButtons'\nimport FeedbackStatistics from './components/feedbackStatistics'\nimport Section from './components/section'\nimport Notification from './components/notificationMessage'\n\nclass App extends Component{\n\n\n  state = {\n  good: 0,\n  neutral: 0,\n  bad: 0\n}\n  \n  \n   onLeaveFeedback = option => {\n    this.setState(prevState => {\n      return { [option]: prevState[option] + 1 };\n    });\n  };\n\n  countTotalFeedback() {\n    const total = this.state.good + this.state.neutral + this.state.bad\n    return total\n} \n  countPositiveFeedbackPercentage = () => {\n    return this.countTotalFeedback()\n      ? Math.round((this.state.good / this.countTotalFeedback()) * 100)\n      : 0\n  }\n\n  \n  render() {\n    const totalFeedbackAmount = this.countTotalFeedback()\n    const {good,neutral,bad}=this.state\n    return (<>\n      <Section title ='Please, leave yor Feedback!'>\n\n      <FeedbackBtns options={this.state}\n        onLeaveFeedback={this.onLeaveFeedback }/>\n      </Section>\n\n      <Section title='Statistics'>\n\n        {totalFeedbackAmount === 0 ? <Notification message='No feedback given' /> :\n      <FeedbackStatistics good={good}\n        neutral={neutral}\n        bad={bad}\n        total={totalFeedbackAmount}\n        percent ={this.countPositiveFeedbackPercentage()}\n       />}\n      </Section>\n      </>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}